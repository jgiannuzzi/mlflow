// Code generated by mlflow/go/tools/generate/main.go. DO NOT EDIT.

package contract

import (
	"github.com/gofiber/fiber/v2"
	"github.com/mlflow/mlflow/mlflow/go/pkg/protos"
)

type TrackingService interface {
	CreateExperiment(input *protos.CreateExperiment) (*protos.CreateExperiment_Response, *Error)
	GetExperiment(input *protos.GetExperiment) (*protos.GetExperiment_Response, *Error)
	DeleteExperiment(input *protos.DeleteExperiment) (*protos.DeleteExperiment_Response, *Error)
	CreateRun(input *protos.CreateRun) (*protos.CreateRun_Response, *Error)
	SearchRuns(input *protos.SearchRuns) (*protos.SearchRuns_Response, *Error)
	LogBatch(input *protos.LogBatch) (*protos.LogBatch_Response, *Error)
}

func RegisterTrackingServiceRoutes(service TrackingService, parser HTTPRequestParser, app *fiber.App) {
	app.Post("/mlflow/experiments/create", func(ctx *fiber.Ctx) error {
		input := &protos.CreateExperiment{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.CreateExperiment(input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Get("/mlflow/experiments/get", func(ctx *fiber.Ctx) error {
		input := &protos.GetExperiment{}
		if err := parser.ParseQuery(ctx, input); err != nil {
			return err
		}
		output, err := service.GetExperiment(input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/experiments/delete", func(ctx *fiber.Ctx) error {
		input := &protos.DeleteExperiment{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.DeleteExperiment(input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/runs/create", func(ctx *fiber.Ctx) error {
		input := &protos.CreateRun{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.CreateRun(input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/runs/search", func(ctx *fiber.Ctx) error {
		input := &protos.SearchRuns{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.SearchRuns(input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/runs/log-batch", func(ctx *fiber.Ctx) error {
		input := &protos.LogBatch{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.LogBatch(input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
}
